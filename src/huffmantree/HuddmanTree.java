package huffmantree;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class HuddmanTree {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
	
		int arr[] = {13,7,8,3,29,6,1};
		Node root = createHuffmanTree(arr);
		
		//测试一把
		preOrder(root);
	}
		
	//编写一个前序遍历的方法
	public static void preOrder(Node root) {
		if(root != null) {
			root.preOrder();
		}else {
			System.out.println("空树，不能遍历");
		}
	}
	
	
	/**
	 * 	
	 * @param arr	需要创建成赫夫曼树的数组
	 * @return	创建好后赫夫曼树的根节点
	 */
	//创建赫夫曼树的方法
	public static Node createHuffmanTree(int[] arr) {
		// TODO Auto-generated method stub
		//第一步：为了操作方便，
		//1.遍历arr数组
		//2.将arr的每个元素构建成一个Node、
		//3.将node放到ArrayList中（便于管理）
		List<Node> nodes = new ArrayList<Node>();
		for(int value:arr) {
			nodes.add(new Node(value));
		}
		
		//处理过程是一个循环的过程
		//结束的标志：ArrayList中只有一个root结点
		
		while(nodes.size() > 1) {
			//先要排序，从小到大
			Collections.sort(nodes);
			
			//System.out.println("nodes="+nodes);
			
			//取出根节点权值最小的二叉树
			//1.取出权值最小的二叉树结点（认为是二叉树）
			Node leftNode = nodes.get(0);
			//2.取出第二小的结点（认为是二叉树）
			Node  rightNode= nodes.get(1);
			
			//3.构建一颗新的二叉树
			Node parent = new Node(leftNode.value + rightNode.value);
			parent.left = leftNode;
			parent.right = rightNode;
			
			//4.从ArrayList中删除处理过得二叉树
			nodes.remove(leftNode);
			nodes.remove(rightNode);
			
			//5.将parerent加入到nodes
			nodes.add(parent);
		}
		
		//返回赫夫曼树的root结点
		return nodes.get(0);
	}
}


//创建结点类
//为了让Node对象支持排序Collections集合排序
//让Node实现Comparble接口
class Node implements Comparable<Node>{
	int value;//结点权值
	Node left;//左子节点
	Node right;//右子节点
	
	//写一个前序遍历
	public void preOrder() {
		System.out.println(this);
		if(this.left !=null) {
			this.left.preOrder();
		}
		if(this.right !=null) {
			this.right.preOrder();
		}
	}
	
	public Node(int value) {
		this.value = value;
	}

	@Override
	public String toString() {
		return "Node [value=" + value + "]";
	}

	@Override
	public int compareTo(Node o) {
		// TODO Auto-generated method stub
		// this.value-0.value表示从小到大排序
		return this.value - o.value;
	}
	
}
